{"ast":null,"code":"var _jsxFileName = \"/Users/ale/Documents/Digital House/FE3/fe3-final/src/Components/utils/global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useMemo, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  themes: {\n    light: {\n      font: \"black\",\n      backgroundColor: \"white\"\n    },\n    dark: {\n      font: \"white\",\n      backgroundColor: \"black\"\n    }\n  },\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(initialState);\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    themes\n  } = initialState; //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n\n  const [theme, setTheme] = useState(themes.light);\n\n  const handleChangeTheme = () => {\n    if (theme === themes.dark) setTheme(themes.light);\n    if (theme === themes.light) setTheme(themes.dark);\n    console.log('first', theme);\n  };\n\n  const themeProviderValue = useMemo(() => ({\n    theme,\n    handleChangeTheme\n  }), [theme, handleChangeTheme]);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: themeProviderValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"RpQAUSp8XqAEcHE20EiMSqq6YdE=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useMemo","useState","initialState","themes","light","font","backgroundColor","dark","data","ContextGlobal","ContextProvider","children","theme","setTheme","handleChangeTheme","console","log","themeProviderValue"],"sources":["/Users/ale/Documents/Digital House/FE3/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useMemo, useState } from \"react\";\n\nexport const initialState = {\n  themes: {\n    light: {\n      font: \"black\",\n      backgroundColor: \"white\",\n    },\n    dark: {\n      font: \"white\",\n      backgroundColor: \"black\",\n    },\n  },\n  data: [],\n};\n\nexport const ContextGlobal = createContext(initialState);\n\nexport const ContextProvider = ({ children }) => {\n  const { themes } = initialState;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [theme, setTheme] = useState(themes.light);\n\n  const handleChangeTheme = () => {\n    if (theme === themes.dark) setTheme(themes.light);\n    if (theme === themes.light) setTheme(themes.dark);\n    console.log('first', theme)\n  };\n\n  const themeProviderValue = useMemo(\n    () => ({ theme, handleChangeTheme }),\n    [theme, handleChangeTheme]\n  );\n\n  return (\n    <ContextGlobal.Provider value={themeProviderValue}>\n      {children}\n    </ContextGlobal.Provider>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,OAAxB,EAAiCC,QAAjC,QAAiD,OAAjD;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAC1BC,MAAM,EAAE;IACNC,KAAK,EAAE;MACLC,IAAI,EAAE,OADD;MAELC,eAAe,EAAE;IAFZ,CADD;IAKNC,IAAI,EAAE;MACJF,IAAI,EAAE,OADF;MAEJC,eAAe,EAAE;IAFb;EALA,CADkB;EAW1BE,IAAI,EAAE;AAXoB,CAArB;AAcP,OAAO,MAAMC,aAAa,gBAAGV,aAAa,CAACG,YAAD,CAAnC;AAEP,OAAO,MAAMQ,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C,MAAM;IAAER;EAAF,IAAaD,YAAnB,CAD+C,CAE/C;;EACA,MAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAACE,MAAM,CAACC,KAAR,CAAlC;;EAEA,MAAMU,iBAAiB,GAAG,MAAM;IAC9B,IAAIF,KAAK,KAAKT,MAAM,CAACI,IAArB,EAA2BM,QAAQ,CAACV,MAAM,CAACC,KAAR,CAAR;IAC3B,IAAIQ,KAAK,KAAKT,MAAM,CAACC,KAArB,EAA4BS,QAAQ,CAACV,MAAM,CAACI,IAAR,CAAR;IAC5BQ,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,KAArB;EACD,CAJD;;EAMA,MAAMK,kBAAkB,GAAGjB,OAAO,CAChC,OAAO;IAAEY,KAAF;IAASE;EAAT,CAAP,CADgC,EAEhC,CAACF,KAAD,EAAQE,iBAAR,CAFgC,CAAlC;EAKA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAEG,kBAA/B;IAAA,UACGN;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CArBM;;GAAMD,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}